<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorial | Md Fahim Sikder</title><link>https://fahim-sikder.github.io/category/tutorial/</link><atom:link href="https://fahim-sikder.github.io/category/tutorial/index.xml" rel="self" type="application/rss+xml"/><description>Tutorial</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 01 Oct 2021 10:29:54 +0200</lastBuildDate><image><url>https://fahim-sikder.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>Tutorial</title><link>https://fahim-sikder.github.io/category/tutorial/</link></image><item><title>Installing Texlive Latest Version (Texlive-2021) on Ubuntu-20.04/18.04</title><link>https://fahim-sikder.github.io/post/installing-texlive-latest-ubuntu/</link><pubDate>Fri, 01 Oct 2021 10:29:54 +0200</pubDate><guid>https://fahim-sikder.github.io/post/installing-texlive-latest-ubuntu/</guid><description>&lt;p>Hello there! In this tutorial, we will learn how to install the latest version of texlive in the ubuntu system! Generally, Ubuntu 20.04 / 18.04 only install Texlive-version-2019 from the local repository! But the Texlive current version is 2021! So, a lot happened in these updates. So, we need to install the 2021 version from the source! But before we do that, we have to uninstall any existing Texlive installation.&lt;/p>
&lt;h3 id="uninstalling-existing-texlive">Uninstalling existing Texlive&lt;/h3>
&lt;p>Use the following command from the terminal to remove the existing installation of Texlive [3].&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt-get purge texlive*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> sudo rm -rf /usr/local/texlive/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> rm -rf ~/.texlive*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> sudo rm -rf /usr/local/share/texmf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> sudo rm -rf /var/lib/texmf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> sudo rm -rf /etc/texmf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> sudo apt-get remove tex-common --purge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> rm -rf ~/.texlive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These commands should remove delete any existing texlive installation.&lt;/p>
&lt;h3 id="installing-texlive-2021">Installing Texlive-2021&lt;/h3>
&lt;p>Now it&amp;rsquo;s time for install the Texlive latest version! But first, we have to install some dependency [2]!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt install wget perl-tk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We need to get the official installer for Texlive. We can do that by using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> tar -xzf install-tl-unx.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> &lt;span class="nb">cd&lt;/span> install-tl-****
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, **** means the version of the installer! Replace the **** according to your downloaded filename. After changing the directory to the downloaded folder, run the installer by using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo ./install-tl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Installation of the latest version of the texlive should start. After the installation, we need to add the installation path with variables to the &lt;code>.bashrc&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo vim ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the following variables to the file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">export PATH=/usr/local/texlive/2021/bin/x86_64-linux${PATH:+:${PATH}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">export INFOPATH=/usr/local/texlive/2021/texmf-dist/doc/info${INFOPATH:+:${INFOPATH}}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">export MANPATH=/usr/local/texlive/2021/texmf-dist/doc/man${MANPATH:+:${MANPATH}}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this, texlive should be installed in the system. We can check it by typing &lt;code>which tex&lt;/code> in the terminal. It should return the path where texlive is installed! Now we have to make sure that Ubuntu thinks we have installed texlive. We can do that by installing the &lt;code>equivs&lt;/code> package!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt install equivs --no-install-recommends freeglut3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> wget -O debian-equivs-2021-ex.txt https://www.tug.org/texlive/files/debian-equivs-2021-ex.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are using the &lt;code>debian-equivs-2021-ex.txt&lt;/code> file to build a &lt;code>.deb&lt;/code> file to install the necessary packages. To build the file and install it follow this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> equivs-build debian-equivs-2021-ex.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo dpkg -i texlive-local_2021.99999999-1_all.deb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt install -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After this, Texlive should be working just fine in Ubuntu!&lt;/p>
&lt;p>Enjoy!&lt;/p>
&lt;h3 id="common-issues-in-installation">Common Issues in Installation&lt;/h3>
&lt;h4 id="installing-packages-using-texlive-manager-tlmgr">Installing Packages Using Texlive Manager (tlmgr)&lt;/h4>
&lt;p>If we need to install / update packages in our texlive installations, we can use the &lt;code>Texlive manager (tlmgr)&lt;/code>. We can open the &lt;code>tlmgr&lt;/code> by typing the following in the terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo tlmgr --gui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But sometimes, it can give the error, such as: &lt;code>tlmgr: command not found&lt;/code>. If this happens, do the following to open the texlive manager [2]:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo env &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PATH&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> tlmgr --gui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, it should work!&lt;/p>
&lt;h3 id="reference">Reference&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://www.tug.org/texlive/doc/texlive-en/texlive-en.pdf" target="_blank" rel="noopener">Texlive Official Guide 2021&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tex.stackexchange.com/questions/1092/how-to-install-vanilla-texlive-on-debian-or-ubuntu" target="_blank" rel="noopener">Post about installing Texlive: Answer Section&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tex.stackexchange.com/questions/95483/how-to-remove-everything-related-to-tex-live-for-fresh-install-on-ubuntu" target="_blank" rel="noopener">Post about removing Texlive: Answer Section&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Installing Docker, Creating &amp; Running First Python Script Using it on Ubuntu 20.04 LTS</title><link>https://fahim-sikder.github.io/post/install-docker-ubuntu/</link><pubDate>Sat, 26 Dec 2020 08:21:34 +0100</pubDate><guid>https://fahim-sikder.github.io/post/install-docker-ubuntu/</guid><description>&lt;p>I always get in trouble when creating a new project with different dependencies installed on my machine. I had to reinstall new libraries, which is doing a new thing repeatedly, and it&amp;rsquo;s time-consuming. Then I learned about docker. Docker will allow you to create a virtual machine to install all your dependencies for your specific project without tempering your primary system. Still, it is faster than the virtual machine. In this tutorial, we are going to see:&lt;/p>
&lt;ol>
&lt;li>Installing docker on ubuntu 20.04 LTS&lt;/li>
&lt;li>Creating and running a python script using docker image&lt;/li>
&lt;/ol>
&lt;h2 id="installing-docker">Installing Docker&lt;/h2>
&lt;p>For installing docker from the website for the different OS, you can visit &lt;a href="https://docs.docker.com/get-docker/" target="_blank" rel="noopener">here.&lt;/a> First of all, we are going to uninstall previously installed docker (if have any). We will run the following command in the terminal to do that:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt-get remove docker docker-engine docker.io containerd runc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="setting-up-the-repository">Setting up the Repository&lt;/h4>
&lt;p>Then we need to update the &lt;code>apt&lt;/code> packages and install the following dependencies by running the commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt-get install &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="go"> apt-transport-https \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> ca-certificates \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> curl \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> gnupg-agent \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> software-properties-common
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we need to add the Docker&amp;rsquo;s official GPG key to the system.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg &lt;span class="p">|&lt;/span> sudo apt-key add -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will use the following command to set up the stable repository.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo add-apt-repository &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&lt;span class="go"> &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> $(lsb_release -cs) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> stable&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="installing-docker-engine">Installing Docker Engine&lt;/h4>
&lt;p>To install the docker engine first we have to update the &lt;code>apt&lt;/code> package again and run the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the docker should be installed in our system, but before we test it, first we need to add the docker into usergroup, otherwise in some system it will give error. We can do this by using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo groupadd docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo usermod -a -G docker &lt;span class="si">${&lt;/span>&lt;span class="nv">USER&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> grep docker /etc/group
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> newgrp docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After running this command, &lt;strong>you have to logout or restart the pc&lt;/strong>. Then run the following command to test the docker system.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo docker run hello-world
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will download a test container and print some messages and then it will exit.&lt;/p>
&lt;h2 id="creating-first-docker-script">Creating First Docker Script&lt;/h2>
&lt;p>Now, it&amp;rsquo;s time to create our first program that will run on docker. Here we will create a simple script that will measure the square root of a number using the python&amp;rsquo;s &lt;code>NumPy&lt;/code> library. So, in this program, we have a dependency, and that is NumPy. We have to install the dependency inside our docker container. First, we will create a folder containing all the necessary things such as python file, docker image etc.&lt;/p>
&lt;p>Then we will create the python script which we will run, let&amp;rsquo;s name it &lt;code>main.py&lt;/code> and write the following code into that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">f&lt;/span>&lt;span class="s1">&amp;#39;The square root of 16 is &lt;/span>&lt;span class="si">{&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s1">&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s create a file name &lt;code>Dockerfile&lt;/code>. This file is the blueprint of the docker image. &lt;em>&amp;ldquo;A docker image is a combination of a file system and &lt;a href="https://searchitoperations.techtarget.com/definition/Docker-image" target="_blank" rel="noopener">parameters&lt;/a>.&amp;rdquo;&lt;/em> In other words, this file will contain the information on the working environment, dependencies etc. of our docker app. And the docker container (it&amp;rsquo;s an instance of docker image) will run the docker system.&lt;/p>
&lt;p>Let&amp;rsquo;s put the following lines in the &lt;code>Dockerfile&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-docker" data-lang="docker">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> python:3.8&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ADD&lt;/span> main.py .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> pip install numpy&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;python&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;main.py&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, let&amp;rsquo;s understand what these lines represent. The docker needs an environment where the docker will run, and this environment can be an operating system, a software package, a python environment etc. Here we are using Python version 3.8 as our environment. By executing &lt;code>FROM python:3.8&lt;/code> line, the docker container pulls python version 3.8 from the docker &lt;a href="https://hub.docker.com/" target="_blank" rel="noopener">hub&lt;/a>. To add the python script in the docker current directory, we will use &lt;code>ADD main.py .&lt;/code> line. The &lt;code>.&lt;/code> specifies the current directory. Now, we will be going to install the dependencies, in the python script we have only one dependency, and that is numpy. So to install the NumPy dependency, we are using &lt;code>RUN pip install numpy&lt;/code>. If your program has other dependencies, you can add them in this line. And finally, to run the python script, we will use &lt;code>CMD&lt;/code> command. Usually, we run a python script in the terminal by using &lt;code>python main.py&lt;/code> command. Just like this, we will pass this command into a tokenized list with the &lt;code>CMD&lt;/code> command. So, &lt;code>CMD [&amp;quot;python&amp;quot;, &amp;quot;main.py&amp;quot;]&lt;/code> will run the python script inside the docker container.&lt;/p>
&lt;h4 id="building-the-docker-image">Building the Docker Image&lt;/h4>
&lt;p>We have the &lt;code>Dockerfile&lt;/code> ready, and we now know what it contains and what the lines inside the &lt;code>Dockerfile&lt;/code> does, it is time to build the docker image! To build the docker image, we need to give the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> docker build -t first-docker .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here &lt;code>first-docker&lt;/code> is our docker image name. We can name it whatever we want. And the &lt;code>-t&lt;/code> argument is used for tagging the resulting image. After running this command, it will look like the following screenshot.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Build Docker" srcset="
/post/install-docker-ubuntu/build_hu34424acdaa48457dcc75561f9fd871b4_123340_1d82e5028a530ef5d8618186d6ee2b37.webp 400w,
/post/install-docker-ubuntu/build_hu34424acdaa48457dcc75561f9fd871b4_123340_ddc0ed44380bbfce4542de2fb25f1dce.webp 760w,
/post/install-docker-ubuntu/build_hu34424acdaa48457dcc75561f9fd871b4_123340_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://fahim-sikder.github.io/post/install-docker-ubuntu/build_hu34424acdaa48457dcc75561f9fd871b4_123340_1d82e5028a530ef5d8618186d6ee2b37.webp"
width="760"
height="635"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h4 id="running-the-docker-image">Running the Docker Image&lt;/h4>
&lt;p>So, our docker image is now ready. To run our image we need to give the following command in the terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> docker run first-docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will run the docker image and give the output of the python script we have written. In our case, we have calculated the square root of 16 using NumPy&amp;rsquo;s sqrt function. So we will see the result like the following screenshot.&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Run Docker" srcset="
/post/install-docker-ubuntu/run_hu15eac8b91ece8f57e05260ccb59d230d_11235_98b3d4bad82ccaa93435fa2bdce01d62.webp 400w,
/post/install-docker-ubuntu/run_hu15eac8b91ece8f57e05260ccb59d230d_11235_fceacf6826302d1c0d4201263da77f4d.webp 760w,
/post/install-docker-ubuntu/run_hu15eac8b91ece8f57e05260ccb59d230d_11235_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://fahim-sikder.github.io/post/install-docker-ubuntu/run_hu15eac8b91ece8f57e05260ccb59d230d_11235_98b3d4bad82ccaa93435fa2bdce01d62.webp"
width="658"
height="155"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>Congratulations! We have just run our first docker app. We can do more complex things with docker, keep digging. The code for this tutorial can be found in &lt;a href="https://github.com/fahim-sikder/docker-tutorial" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>Have fun and Stay Safe!&lt;/p>
&lt;h3 id="reference">Reference&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/" target="_blank" rel="noopener">Docker official installation procedure&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>How to Install R and two most popular R packages (tidyverse &amp; rstan) in Ubuntu 20.04 LTS</title><link>https://fahim-sikder.github.io/post/how-to-install-r-ubuntu-20/</link><pubDate>Sun, 06 Sep 2020 20:39:11 +0600</pubDate><guid>https://fahim-sikder.github.io/post/how-to-install-r-ubuntu-20/</guid><description>&lt;p>Hello there! In this post, we are going to see how we can install &lt;code>R&lt;/code> in our Ubuntu 20.04 LTS. Also, we will install two of R&amp;rsquo;s popular packages, namely: &lt;a href="https://www.tidyverse.org/" target="_blank" rel="noopener">tidyverse&lt;/a> &amp;amp; &lt;a href="https://mc-stan.org/users/interfaces/rstan" target="_blank" rel="noopener">rstan&lt;/a>. Both of these packages are important tools for data scientists. Rstan is the R interface for &lt;a href="https://mc-stan.org/" target="_blank" rel="noopener">stan&lt;/a>, which is the state-of-the-art platform for statistical modeling and high-performance statistical computation. I faced so much difficulty installing these. So, I decided to make it simple for you guys.&lt;/p>
&lt;h3 id="installing-r">Installing R&lt;/h3>
&lt;p>First, let&amp;rsquo;s install the &lt;code>R&lt;/code> in our system. We will install R from &lt;a href="https://cran.r-project.org/" target="_blank" rel="noopener">CRAN&lt;/a> repository. We need to install some dependencies for adding a new repository over HTTPS. To do that, we will run the following command in our terminal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">sudo apt-get install dirmngr gnupg apt-transport-https ca-certificates software-properties-common
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we need to add the CRAN repository to our system sources’ list. We can do that by typing the following commands into our terminal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">sudo add-apt-repository &amp;#39;deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, we will install R by using the following command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">sudo apt-get install r-base
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the R should be installed in our system. To check that, we can run the following command into our terminal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">R
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If R is installed correctly, the console will show something like this:&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="Figure 1" srcset="
/post/how-to-install-r-ubuntu-20/r_hufd30d648919556e88c13f92b33f4636e_49944_f03b895017f58720e72a0970f2cfa6db.webp 400w,
/post/how-to-install-r-ubuntu-20/r_hufd30d648919556e88c13f92b33f4636e_49944_abe9c8a2ebe5f16b87f4e63c9aed8aee.webp 760w,
/post/how-to-install-r-ubuntu-20/r_hufd30d648919556e88c13f92b33f4636e_49944_1200x1200_fit_q75_h2_lanczos.webp 1200w"
src="https://fahim-sikder.github.io/post/how-to-install-r-ubuntu-20/r_hufd30d648919556e88c13f92b33f4636e_49944_f03b895017f58720e72a0970f2cfa6db.webp"
width="731"
height="388"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="installing-tidyverse">Installing tidyverse&lt;/h3>
&lt;p>Now, we will install the tidyverse packages. &lt;strong>Please note that we need to install &lt;code>tidyverse&lt;/code> first then install &lt;code>rstan&lt;/code>, because &lt;code>rstan&lt;/code> requires some dependencies. By installing &lt;code>tidyverse&lt;/code> first, it will make the job easier.&lt;/strong> First of all, we need to install some dependencies by typing the following commands in our terminal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev libv8-dev
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then install &lt;code>tidyverse&lt;/code> by using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">sudo R
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">install.packages(&amp;#39;tidyverse&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It will take some time to get installed. After installation, exit from the &lt;code>r&lt;/code> environment using the &lt;code>q()&lt;/code> function and be sure to save the environment when prompted.&lt;/p>
&lt;h3 id="installing-rstan">Installing rstan&lt;/h3>
&lt;p>To install the rstan, we need first check if our system has rstan already installed. If it has, then we need to remove it. We can do this by using the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">remove.packages(&amp;#34;rstan&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">if (file.exists(&amp;#34;.RData&amp;#34;)) file.remove(&amp;#34;.RData&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, we need to check the c++ toolchain. We can do that by using these commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">sudo R
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">pkgbuild::has_build_tools(debug = TRUE)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will check if the installed c++ is using the pkgbuild package. The system will give the output &lt;code>TRUE&lt;/code> if it is using the pkgbuild package. Otherwise, we need to follow instructions from &lt;a href="https://github.com/stan-dev/rstan/wiki/Installing-RStan-on-Linux" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>Now, run the following command to install rstan.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">install.packages(&amp;#34;rstan&amp;#34;, repos = &amp;#34;https://cloud.r-project.org/&amp;#34;, dependencies = TRUE)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Again, it will take some time to get installed. After the installations, exit from the &lt;code>r&lt;/code> environment using &lt;code>q()&lt;/code> function and be sure to save the environment when prompted.&lt;/p>
&lt;p>Happy Coding!!!&lt;/p>
&lt;h4 id="references">References&lt;/h4>
&lt;ol>
&lt;li>&lt;a href="https://linuxize.com/post/how-to-install-r-on-ubuntu-20-04/" target="_blank" rel="noopener">Blog post on installing R&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started" target="_blank" rel="noopener">Official instruction of installing rstan&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Julia Tutorial Part 2: Data Structures</title><link>https://fahim-sikder.github.io/post/julia-tutorial-part-2-data-structures/</link><pubDate>Thu, 30 Jul 2020 10:50:26 +0600</pubDate><guid>https://fahim-sikder.github.io/post/julia-tutorial-part-2-data-structures/</guid><description>&lt;h2 id="data-structures">Data Structures&lt;/h2>
&lt;p>In this tutorial, we will see &lt;code>Julia's&lt;/code> data structure. Namely,&lt;/p>
&lt;ol>
&lt;li>Tuple,&lt;/li>
&lt;li>Array,&lt;/li>
&lt;li>Dictionary, and&lt;/li>
&lt;li>Set&lt;/li>
&lt;/ol>
&lt;h3 id="tuple">Tuple&lt;/h3>
&lt;p>Lets first discuss about &lt;code>Tuple&lt;/code>. Tuple and Array can hold a list of elements. But the basic difference between them is, &lt;code>Tuple&lt;/code> is immutable. It means that, we can&amp;rsquo;t change the value of a tuple once it&amp;rsquo;s created. We can create a tuple by giving some ordered elements into a paranthesis &lt;code>( )&lt;/code>. The syntax of a tuple is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">item1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">itme3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s see an example. Suppose we want to create a tuple consists of some mixed values. We just give those values within a paranthesis &lt;code>( )&lt;/code> or just without the parenthesis. Both will work just fine. Then we can print the type of the tuple by using the &lt;code>typeof()&lt;/code> method. To access the elements of a tuple, we can use the index values of tuple, but keep in mind in &lt;code>Julia&lt;/code>, index starts from 1. So, in order to access the first element of tuple, we need to follow this syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tuple_name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_input_">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">tup1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">4.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tup1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">#this also works&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tup2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tup2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>(1, 2, 4.5, &amp;quot;Hello&amp;quot;)
('c', 11, 0.5, &amp;quot;World&amp;quot;)
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-1">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Type of tup1: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tup1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Type of tup2: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tup2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-1">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Type of tup1: Tuple{Int64,Int64,Float64,String}
Type of tup2: Tuple{Char,Int64,Float64,String}
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-2">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c">#accessing Elements&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tup1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tup2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-2">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>1
World
&lt;/code>&lt;/pre>
&lt;p>As, we were saying earlier that, tuples are immuatble. That means, we can not change the elements of a tuple after it has been initialized. Let&amp;rsquo;s test that. We will try to change the third element of &lt;code>tup1&lt;/code>. And it will give an error.&lt;/p>
&lt;h4 id="_input_-3">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">tup1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-3">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>MethodError: no method matching setindex!(::Tuple{Int64,Int64,Float64,String}, ::Char, ::Int64)
Stacktrace:
[1] top-level scope at In[4]:1
&lt;/code>&lt;/pre>
&lt;p>There is an another version of tuples and it is called &lt;strong>NamedTuples&lt;/strong>. Here, we can assign an unique name to each elements of the tuple to access them.&lt;/p>
&lt;p>To access by using its name we need to use the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tuple_name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">variable_name&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_input_-4">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">named_tup&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">lang&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">int_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">float_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">3.6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Elements of named_tuple: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_tup&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Accessing first element by index: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_tup&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Accessing first element by using variable name: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">named_tup&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-4">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Elements of named_tuple: (lang = 'C', int_num = 1, float_num = 3.6)
Accessing first element by index: C
Accessing first element by using variable name: C
&lt;/code>&lt;/pre>
&lt;h3 id="array">Array&lt;/h3>
&lt;p>Unlike Tuples, Arrays are mutable. So, after assigning values we can change them. We can declare an array in many ways. such as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">item1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">item1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Array&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="kt">DataType&lt;/span>&lt;span class="p">}([&lt;/span>&lt;span class="n">item1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here in the third syntax of declaring array, we can specify what kind of data we want to assign in our array. Lets, create three arrays using these syntax.&lt;/p>
&lt;h4 id="_input_-5">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mf">2.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Array&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="kt">Int64&lt;/span>&lt;span class="p">}([&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Elements of arr1: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Elements of arr2: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Elements of arr3: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-5">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Elements of arr1: [1, 2, 3]
Elements of arr2: Any[2.5, &amp;quot;Hello&amp;quot;, 100]
Elements of arr3: [4, 6, 8]
&lt;/code>&lt;/pre>
&lt;p>These are the example of 1 dimensional array. The syntax of declaring 2 dimensional array is follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array_2d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">item1&lt;/span> &lt;span class="n">item2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">item3&lt;/span> &lt;span class="n">item4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s create an array which has 3 row and 2 columns or an &lt;code>(3*2)&lt;/code> array.&lt;/p>
&lt;h4 id="_input_-6">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr_2d&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr_2d&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-6">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>3×2 Array{Int64,2}:
1 2
3 4
5 6
&lt;/code>&lt;/pre>
&lt;h4 id="array-operations">Array Operations&lt;/h4>
&lt;p>To insert, delete or sort elements of an array we can use some built in methods like &lt;code>insert(), deleteat(), push(), pushfirst(), pop(), popfirst(), sort()&lt;/code>. Let&amp;rsquo;s use these methods. To insert elements in an array we can use &lt;code>push()&lt;/code>, &lt;code>pushfirst()&lt;/code> and &lt;code>insert()&lt;/code> methods. &lt;code>push()&lt;/code> method insert an element in the end of the array, &lt;code>pushfirst()&lt;/code> inserts an item at the begining of the array, and &lt;code>insert()&lt;/code> method insert an item into a given location. The syntax of &lt;code>insert()&lt;/code> method is&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">position_to_insert&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s first insert into an array.&lt;/p>
&lt;h4 id="_input_-7">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">push!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Array after using push method: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pushfirst!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Array after using pushfirst method: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">insert!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2525&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Array after using insert method: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-7">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Array after using push method: [1, 2, 3, 4, 5, 100]
Array after using pushfirst method: [12, 1, 2, 3, 4, 5, 100]
Array after using insert method: [12, 1, 2525, 2, 3, 4, 5, 100]
&lt;/code>&lt;/pre>
&lt;p>To delete elements in an array, we can use &lt;code>pop()&lt;/code>, &lt;code>popfirst()&lt;/code> and &lt;code>deleteat()&lt;/code> methods. &lt;code>pop()&lt;/code> method deletes an element from the end of the array, &lt;code>popfirst()&lt;/code> deletes an item from the begining of the array, and &lt;code>deleteat()&lt;/code> method deletes an item from a given location. The syntax of &lt;code>deleteat()&lt;/code> method is&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deleteat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">position_for_delete&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We will use the same array which we used with insertion methods.&lt;/p>
&lt;h4 id="_input_-8">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Array before deleting elements: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">pop!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Array after using pop method: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">popfirst!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Array after using popfirst method: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deleteat!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Array after using deleteat method at the 4th index: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-8">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Array before deleting elements: [12, 1, 2525, 2, 3, 4, 5, 100]
Array after using pop method: [12, 1, 2525, 2, 3, 4, 5]
Array after using popfirst method: [1, 2525, 2, 3, 4, 5]
Array after using deleteat method at the 4th index: [1, 2525, 2, 4, 5]
&lt;/code>&lt;/pre>
&lt;p>Besides these inserting and deletion methods, there are some methods for other helpful tasks. Here, we will try to mention some of the methods. For sorting we can use &lt;code>sort()&lt;/code> method. Also, if we want arrays of ones or zeros we can use &lt;code>ones()&lt;/code> and &lt;code>zeros()&lt;/code> method respectively. We can generate random number from uniform distribution using &lt;code>rand()&lt;/code> method. To create random number from normal distribution we can use &lt;code>randn()&lt;/code> method.&lt;/p>
&lt;p>Let&amp;rsquo;s see them in action.&lt;/p>
&lt;h4 id="_input_-9">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># sorting test_arr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Before sorting the test_array: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sort!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;After sorting the test_array: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">test_arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-9">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Before sorting the test_array: [1, 2525, 2, 4, 5]
After sorting the test_array: [1, 2, 4, 5, 2525]
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-10">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># create an 2*3 array of ones&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ones_arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ones&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ones_arr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-10">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>2×3 Array{Float64,2}:
1.0 1.0 1.0
1.0 1.0 1.0
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-11">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># create an 2*3 array of zeros&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">zeros_arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">zeros&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">zeros_arr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-11">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>2×3 Array{Float64,2}:
0.0 0.0 0.0
0.0 0.0 0.0
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-12">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># create an array size of 2*5 with random variable from uniform distribution &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-12">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>2×5 Array{Float64,2}:
0.451961 0.309916 0.193709 0.602781 0.160294
0.737481 0.523093 0.662101 0.946056 0.804512
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-13">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># create an array size of 2*5 with random variable from normal distribution &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">randn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-13">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>2×5 Array{Float64,2}:
0.907519 2.42625 0.909603 -0.420501 0.632623
-1.78817 0.63605 0.17628 0.419475 -0.200928
&lt;/code>&lt;/pre>
&lt;h3 id="dictionary">Dictionary&lt;/h3>
&lt;p>Dictionary is a collection of key-value pairs, where we can access the value using its key. We can declare dictionary in the following three ways:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">key1&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">value1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key2&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">value2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">....&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="kt">key_datatype&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">value_datatype&lt;/span>&lt;span class="p">}(&lt;/span>&lt;span class="n">key1&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">value1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">key2&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">value2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">....&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here in the third syntax of declaring dictionary, we can specify the data types of keys and values.&lt;/p>
&lt;h4 id="_input_-14">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Bangladesh&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Dhaka&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Sweden&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Stockholm&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Elements of dict1: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dict1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Apple&amp;#34;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s">&amp;#34;Red&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Orange&amp;#34;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s">&amp;#34;Orange&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Banana&amp;#34;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="s">&amp;#34;Yellow&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Elements of dict2: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dict2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dict3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="kt">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Int64&lt;/span>&lt;span class="p">}(&lt;/span>&lt;span class="s">&amp;#34;One&amp;#34;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Two&amp;#34;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Three&amp;#34;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Elements of dict3: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">dict3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-14">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Elements of dict1: Dict{Any,Any}(&amp;quot;Bangladesh&amp;quot; =&amp;gt; &amp;quot;Dhaka&amp;quot;,&amp;quot;Sweden&amp;quot; =&amp;gt; &amp;quot;Stockholm&amp;quot;)
Elements of dict2: Dict(&amp;quot;Apple&amp;quot; =&amp;gt; &amp;quot;Red&amp;quot;,&amp;quot;Orange&amp;quot; =&amp;gt; &amp;quot;Orange&amp;quot;,&amp;quot;Banana&amp;quot; =&amp;gt; &amp;quot;Yellow&amp;quot;)
Elements of dict3: Dict(&amp;quot;One&amp;quot; =&amp;gt; 1,&amp;quot;Two&amp;quot; =&amp;gt; 2,&amp;quot;Three&amp;quot; =&amp;gt; 3)
&lt;/code>&lt;/pre>
&lt;h4 id="accessing-dictionary-elements">Accessing Dictionary Elements&lt;/h4>
&lt;p>To access the elements of dictionary we need to access them via their key. Suppose in &lt;code>dict3&lt;/code>, we want to access the value &lt;code>3&lt;/code>. So, we can do that by this:&lt;/p>
&lt;h4 id="_input_-15">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dict3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Three&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-15">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>3
&lt;/code>&lt;/pre>
&lt;p>Also, we can access the keys and values of a dictionary seperately by using &lt;code>keys()&lt;/code> and &lt;code>values()&lt;/code> method respectively.&lt;/p>
&lt;h4 id="_input_-16">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Keys of dict3: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dict3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Values of dict3: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dict3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-16">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Keys of dict3: [&amp;quot;One&amp;quot;, &amp;quot;Two&amp;quot;, &amp;quot;Three&amp;quot;]
Values of dict3: [1, 2, 3]
&lt;/code>&lt;/pre>
&lt;h3 id="set">Set&lt;/h3>
&lt;p>Another data structure of &lt;code>julia&lt;/code> is &lt;code>set&lt;/code>. &lt;code>Set&lt;/code> is like &lt;code>array&lt;/code>, its mutable. But the basic difference between them is, &lt;code>set&lt;/code> holds only &lt;code>unique element&lt;/code>. So, there will be no duplicate element in a &lt;code>set&lt;/code>. And the basic syntax of a set is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">set_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Set&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">item1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">item3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">....&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can do operations like union, intersection, difference between two sets using &lt;code>union()&lt;/code>, &lt;code>intersect()&lt;/code>, and &lt;code>setdiff()&lt;/code> methods respectively. Also we can check if one set is subset of another one by using &lt;code>issubset()&lt;/code> function.&lt;/p>
&lt;p>Here we will create 2 sets and apply these functions on them.&lt;/p>
&lt;h4 id="_input_-17">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">set1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Set&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;new&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Set1: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">set1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">set2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">Set&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Set1: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">set2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-17">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Set1: Set(Any[&amp;quot;new&amp;quot;, 2, 3, 5, 1])
Set1: Set([2, 5])
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-18">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># union between two sets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">union&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">set2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-18">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Set{Any} with 5 elements:
&amp;quot;new&amp;quot;
2
3
5
1
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-19">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># intersection between two sets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">intersect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">set2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-19">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Set{Any} with 2 elements:
2
5
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-20">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># set difference between two sets&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">setdiff&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">set2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-20">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Set{Any} with 3 elements:
&amp;quot;new&amp;quot;
3
1
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-21">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># Checking if set2 is subset of set1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">issubset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">set1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-21">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>true
&lt;/code>&lt;/pre>
&lt;p>As, set is mutable, we can add or delete elements from it. To add elements we can use &lt;code>push()&lt;/code> method and to delete elements we can use &lt;code>delete()&lt;/code> method. For deletion, we need to tell specifically which element from a set we want to delete.&lt;/p>
&lt;h4 id="_input_-22">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">push!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-22">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Set{Any} with 6 elements:
&amp;quot;new&amp;quot;
2
3
&amp;quot;hello&amp;quot;
5
1
&lt;/code>&lt;/pre>
&lt;h4 id="_input_-23">&lt;em>input&lt;/em>&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">delete!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">set1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="_output_-23">&lt;em>output&lt;/em>&lt;/h4>
&lt;pre>&lt;code>Set{Any} with 5 elements:
&amp;quot;new&amp;quot;
2
3
5
1
&lt;/code>&lt;/pre>
&lt;p>So, thats it.&lt;/p>
&lt;p>Keep Practicing.&lt;/p>
&lt;p>Good luck, May the Julia be with you!!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Other posts in this series:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://fahim-sikder.github.io/post/julia-tutorial-part-1/">Julia Tutorial Part 1: Installations &amp;amp; Basics&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Julia Tutorial Part 1: Installations &amp; Basics</title><link>https://fahim-sikder.github.io/post/julia-tutorial-part-1/</link><pubDate>Wed, 08 Jul 2020 14:24:00 +0600</pubDate><guid>https://fahim-sikder.github.io/post/julia-tutorial-part-1/</guid><description>&lt;h2 id="introduction-installations-and-basics">Introduction, Installations, and Basics&lt;/h2>
&lt;p>&lt;code>Julia&lt;/code> is a open source programming language. It was designed from the beginning for high &lt;a href="https://julialang.org/benchmarks/" target="_blank" rel="noopener">performance&lt;/a>. Julia programs compile to efficient native code for multiple platforms via LLVM. To install it we need to download it&amp;rsquo;s binary from &lt;a href="https://julialang.org/downloads/" target="_blank" rel="noopener">here&lt;/a>. We are going to use &lt;code>Jupyter Notebook&lt;/code> as the code editor. But to do that we need to link the &lt;code>Jupyter Notebook&lt;/code> with &lt;code>Julia&lt;/code>. After installing &lt;code>Julia&lt;/code>, open the Julia Command prompt with administration rights. Then type the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">Pkg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Pkg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;IJulia&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These will integrate &lt;code>Julia&lt;/code> environment with &lt;code>Jupyter Notebbok&lt;/code>.&lt;/p>
&lt;p>N.B: We are assuming that your system has already Jupyter notebook installed.&lt;/p>
&lt;p>&lt;code>Julia&lt;/code> file has &lt;code>.jl&lt;/code> extensions. It&amp;rsquo;s time to write our first program. We will print &lt;code>Hello Julia!&lt;/code>. The print function in &lt;code>julia&lt;/code> is &lt;code>println&lt;/code>.&lt;/p>
&lt;h5 id="_input_">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello Julia!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>Hello Julia!
&lt;/code>&lt;/pre>
&lt;p>Congratulations! We have just run your first program in &lt;code>Julia&lt;/code>.&lt;/p>
&lt;h3 id="variables--data-types">Variables &amp;amp; Data Types&lt;/h3>
&lt;p>&lt;code>Julia&lt;/code> support 5 basic data types.&lt;/p>
&lt;ol>
&lt;li>Integer&lt;/li>
&lt;li>Float&lt;/li>
&lt;li>String&lt;/li>
&lt;li>Character&lt;/li>
&lt;li>Boolean&lt;/li>
&lt;/ol>
&lt;p>We can easily declare a variable just assigining the value in it. We don&amp;rsquo;t need to give the datatype when declaring a variable. Also we can see what is the datatype of a variable by using &lt;code>typeof&lt;/code> function. Lets see an example.&lt;/p>
&lt;h5 id="_input_-1">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">second&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">22.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">third&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">third&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fourth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fourth&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fifth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;L&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fifth&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-1">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>Int64
Float64
Bool
String
Char
&lt;/code>&lt;/pre>
&lt;p>&lt;code>String&lt;/code> needs to be in double quotes or triple quotes. If we put &lt;code>String&lt;/code> in single quote, it will show error. Only &lt;code>Character&lt;/code> will be in single quote.&lt;/p>
&lt;h5 id="_input_-2">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c">#This is an intenional error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">strr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">Hello&lt;/span> &lt;span class="n">world&lt;/span>&lt;span class="o">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-2">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>syntax: invalid character literal
&lt;/code>&lt;/pre>
&lt;h3 id="constant">Constant&lt;/h3>
&lt;p>To declare a constant we need to use &lt;code>const&lt;/code> keyword. After defining a constant we can redefine it, but it will give us a warning. We only can redefine in the same datatype. Suppose: we created a constant with integer datatype with a value, so we can redefine it with another integer value though it will give a warning, but we can not redefine with another datatype. It will give an error.&lt;/p>
&lt;h5 id="_input_-3">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">var1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">var1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">#this will give error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">var1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">4.9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-3">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>2
3
WARNING: redefining constant var1
invalid redefinition of constant var1
Stacktrace:
[1] top-level scope at In[4]:5
&lt;/code>&lt;/pre>
&lt;h3 id="strings">Strings&lt;/h3>
&lt;p>As we have mentioned earlier, &lt;code>String&lt;/code> needs to be in double or triple quotes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mystr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hey this is a string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mystr2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> this is a multiple line string
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> this string has 2 lines
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can see the length of a string using the &lt;code>length&lt;/code> function.&lt;/p>
&lt;h5 id="_input_-4">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mystr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hey this is a string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-4">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>20
&lt;/code>&lt;/pre>
&lt;h4 id="taking-seperate-characters-from-string">Taking seperate characters from string&lt;/h4>
&lt;p>We can access seperate characters from the string using index. Here we need to keep in mind that, unlike other programming language, &lt;code>Julia&lt;/code> access its first character from a string using index 1. Suppose in &lt;code>mystr&lt;/code> we want access the first character &lt;code>H&lt;/code> , so we need to access it using &lt;code>mystr[1]&lt;/code>. Now, if we want to access the last character of a string we need to use the &lt;code>end&lt;/code> keyword. So, in &lt;code>mystr&lt;/code> the last character is &lt;code>g&lt;/code> and we can access it by using &lt;code>mystr[end]&lt;/code>.&lt;/p>
&lt;h5 id="_input_-5">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-5">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>H
g
&lt;/code>&lt;/pre>
&lt;h4 id="substring">Substring&lt;/h4>
&lt;p>We also can get a substring from a string by slicing it. To do that we need to use &lt;code>:&lt;/code> this. Suppose we want &lt;code>this&lt;/code> as substring from &lt;code>mystr&lt;/code> string. So, &lt;code>this&lt;/code> started from index number &lt;code>5&lt;/code> and ended in index number &lt;code>8&lt;/code>. Then we need to access it using &lt;code>mystr[5:8]&lt;/code>.&lt;/p>
&lt;h5 id="_input_-6">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-6">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>this
&lt;/code>&lt;/pre>
&lt;h4 id="string-concatenation">String Concatenation&lt;/h4>
&lt;p>To concatenate one string with another we need to use &lt;code>*&lt;/code> keyword. Suppose we have two strings. &lt;code>str1 = &amp;quot;Hello&amp;quot;&lt;/code> and &lt;code>str2 = &amp;quot;World&amp;quot;&lt;/code>. We can merge them like this:&lt;/p>
&lt;h5 id="_input_-7">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">str1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">str2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">str2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-7">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>Hello, World
&lt;/code>&lt;/pre>
&lt;p>Thats it for this tutorial.&lt;/p>
&lt;p>Good Luck, and May the Julia be with you!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Other posts in this series:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://fahim-sikder.github.io/post/julia-tutorial-part-2-data-structures/">Julia Tutorial Part 2: Data Structures&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>