<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Basics | Md Fahim Sikder</title><link>https://fahim-sikder.github.io/tag/basics/</link><atom:link href="https://fahim-sikder.github.io/tag/basics/index.xml" rel="self" type="application/rss+xml"/><description>Basics</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Wed, 08 Jul 2020 14:24:00 +0600</lastBuildDate><image><url>https://fahim-sikder.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>Basics</title><link>https://fahim-sikder.github.io/tag/basics/</link></image><item><title>Julia Tutorial Part 1: Installations &amp; Basics</title><link>https://fahim-sikder.github.io/post/julia-tutorial-part-1/</link><pubDate>Wed, 08 Jul 2020 14:24:00 +0600</pubDate><guid>https://fahim-sikder.github.io/post/julia-tutorial-part-1/</guid><description>&lt;h2 id="introduction-installations-and-basics">Introduction, Installations, and Basics&lt;/h2>
&lt;p>&lt;code>Julia&lt;/code> is a open source programming language. It was designed from the beginning for high &lt;a href="https://julialang.org/benchmarks/" target="_blank" rel="noopener">performance&lt;/a>. Julia programs compile to efficient native code for multiple platforms via LLVM. To install it we need to download it&amp;rsquo;s binary from &lt;a href="https://julialang.org/downloads/" target="_blank" rel="noopener">here&lt;/a>. We are going to use &lt;code>Jupyter Notebook&lt;/code> as the code editor. But to do that we need to link the &lt;code>Jupyter Notebook&lt;/code> with &lt;code>Julia&lt;/code>. After installing &lt;code>Julia&lt;/code>, open the Julia Command prompt with administration rights. Then type the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">Pkg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Pkg&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;IJulia&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These will integrate &lt;code>Julia&lt;/code> environment with &lt;code>Jupyter Notebbok&lt;/code>.&lt;/p>
&lt;p>N.B: We are assuming that your system has already Jupyter notebook installed.&lt;/p>
&lt;p>&lt;code>Julia&lt;/code> file has &lt;code>.jl&lt;/code> extensions. It&amp;rsquo;s time to write our first program. We will print &lt;code>Hello Julia!&lt;/code>. The print function in &lt;code>julia&lt;/code> is &lt;code>println&lt;/code>.&lt;/p>
&lt;h5 id="_input_">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello Julia!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>Hello Julia!
&lt;/code>&lt;/pre>
&lt;p>Congratulations! We have just run your first program in &lt;code>Julia&lt;/code>.&lt;/p>
&lt;h3 id="variables--data-types">Variables &amp;amp; Data Types&lt;/h3>
&lt;p>&lt;code>Julia&lt;/code> support 5 basic data types.&lt;/p>
&lt;ol>
&lt;li>Integer&lt;/li>
&lt;li>Float&lt;/li>
&lt;li>String&lt;/li>
&lt;li>Character&lt;/li>
&lt;li>Boolean&lt;/li>
&lt;/ol>
&lt;p>We can easily declare a variable just assigining the value in it. We don&amp;rsquo;t need to give the datatype when declaring a variable. Also we can see what is the datatype of a variable by using &lt;code>typeof&lt;/code> function. Lets see an example.&lt;/p>
&lt;h5 id="_input_-1">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">first&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">first&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">second&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">22.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">second&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">third&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">third&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fourth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fourth&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fifth&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;L&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fifth&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-1">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>Int64
Float64
Bool
String
Char
&lt;/code>&lt;/pre>
&lt;p>&lt;code>String&lt;/code> needs to be in double quotes or triple quotes. If we put &lt;code>String&lt;/code> in single quote, it will show error. Only &lt;code>Character&lt;/code> will be in single quote.&lt;/p>
&lt;h5 id="_input_-2">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="c">#This is an intenional error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">strr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">Hello&lt;/span> &lt;span class="n">world&lt;/span>&lt;span class="o">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-2">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>syntax: invalid character literal
&lt;/code>&lt;/pre>
&lt;h3 id="constant">Constant&lt;/h3>
&lt;p>To declare a constant we need to use &lt;code>const&lt;/code> keyword. After defining a constant we can redefine it, but it will give us a warning. We only can redefine in the same datatype. Suppose: we created a constant with integer datatype with a value, so we can redefine it with another integer value though it will give a warning, but we can not redefine with another datatype. It will give an error.&lt;/p>
&lt;h5 id="_input_-3">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">var1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">var1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">#this will give error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">var1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">4.9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">var1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-3">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>2
3
WARNING: redefining constant var1
invalid redefinition of constant var1
Stacktrace:
[1] top-level scope at In[4]:5
&lt;/code>&lt;/pre>
&lt;h3 id="strings">Strings&lt;/h3>
&lt;p>As we have mentioned earlier, &lt;code>String&lt;/code> needs to be in double or triple quotes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mystr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hey this is a string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">mystr2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> this is a multiple line string
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> this string has 2 lines
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can see the length of a string using the &lt;code>length&lt;/code> function.&lt;/p>
&lt;h5 id="_input_-4">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mystr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hey this is a string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-4">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>20
&lt;/code>&lt;/pre>
&lt;h4 id="taking-seperate-characters-from-string">Taking seperate characters from string&lt;/h4>
&lt;p>We can access seperate characters from the string using index. Here we need to keep in mind that, unlike other programming language, &lt;code>Julia&lt;/code> access its first character from a string using index 1. Suppose in &lt;code>mystr&lt;/code> we want access the first character &lt;code>H&lt;/code> , so we need to access it using &lt;code>mystr[1]&lt;/code>. Now, if we want to access the last character of a string we need to use the &lt;code>end&lt;/code> keyword. So, in &lt;code>mystr&lt;/code> the last character is &lt;code>g&lt;/code> and we can access it by using &lt;code>mystr[end]&lt;/code>.&lt;/p>
&lt;h5 id="_input_-5">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-5">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>H
g
&lt;/code>&lt;/pre>
&lt;h4 id="substring">Substring&lt;/h4>
&lt;p>We also can get a substring from a string by slicing it. To do that we need to use &lt;code>:&lt;/code> this. Suppose we want &lt;code>this&lt;/code> as substring from &lt;code>mystr&lt;/code> string. So, &lt;code>this&lt;/code> started from index number &lt;code>5&lt;/code> and ended in index number &lt;code>8&lt;/code>. Then we need to access it using &lt;code>mystr[5:8]&lt;/code>.&lt;/p>
&lt;h5 id="_input_-6">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mystr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-6">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>this
&lt;/code>&lt;/pre>
&lt;h4 id="string-concatenation">String Concatenation&lt;/h4>
&lt;p>To concatenate one string with another we need to use &lt;code>*&lt;/code> keyword. Suppose we have two strings. &lt;code>str1 = &amp;quot;Hello&amp;quot;&lt;/code> and &lt;code>str2 = &amp;quot;World&amp;quot;&lt;/code>. We can merge them like this:&lt;/p>
&lt;h5 id="_input_-7">&lt;em>input&lt;/em>&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-julia" data-lang="julia">&lt;span class="line">&lt;span class="cl">&lt;span class="n">str1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">str2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">str2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="_output_-7">&lt;em>output&lt;/em>&lt;/h5>
&lt;pre>&lt;code>Hello, World
&lt;/code>&lt;/pre>
&lt;p>Thats it for this tutorial.&lt;/p>
&lt;p>Good Luck, and May the Julia be with you!&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Other posts in this series:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://fahim-sikder.github.io/post/julia-tutorial-part-2-data-structures/">Julia Tutorial Part 2: Data Structures&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>